[DB연결할 때 주의점!]

파일들의 역할을 분명하게 이해할 것!
1) app.js -> 서버를 생성, 포트를 지정하고, 미들웨어에 필요한 모듈을 연결 

2) routes/router.js -> 사용자가 보낸 요청(url)에 맞게 원하는 로직을 작성하는 공간 
    - DB 조회, 삽입, 삭제, 업데이트 
    - 사용자에게 데이터를 반환 res.send() / render() / write() / sendFile()
        - send : 데이터를 보내주기
        - render() : views 안에 html에 보내서 파일을 만듦. SSR
        - write() : 화면에 보내주기 

3) config/db.js -> DB의 연결정보를 담당, 연결하는 역할 

4) public -> 정적인 파일들을 관리 (js, css, img, video, ...) 

5) views -> 동적으로 변하는 페이지를 담당 (-> 리액트가 담당)


★ 프론트와 백의 데이터 흐름을 기억!
1. 프론트에서 백에게 데이터를 요청 (ajax, axios, fetch)
    - 요청만 할거면 get 방식을 사용
    - DB에 영향을 주는 경우는 post 방식을 사용 
    
2. 백에서는 요청을 처리하고 응답하는 역할
    - 처음에는 routes가 경로를 인식!
    - 두번째는 routes가 DB에 접근해서 로직을 처리(조회, 삽입, ...)
    - 세번째는 데이터를 리턴 (res.send(), ...)

3. 프론트에서는 리턴받은 데이터를 활용!